{"version":3,"sources":["../node_modules/foundation-sites/scss/util/_math.scss","block-accordion-section/block-accordion-section.scss","../assets/styles/scss/global/_sass-variables.scss"],"names":[],"mappings":"AAIA,gBAAI,CCCJ,MACI,gCAAyB,CAIzB,8BACI,0BCJM,CDCd,gEAOY,+DAAkE,CAP9E,0FAYQ,oBCbM,CDgBN,eAAsB,CACtB,0BCjBM,CDkBN,2BClBM,CDeN,YCfM,CDsBd,8DAKQ,8CAA+C,CAF/C,aAAc,CACd,eAC+C,CALvD,iFAQY,gBAAiB,CADjB,iBACiB,CAR7B,wFAegB,8CAA+C,CAC/C,UAAY,CANZ,qDAAsD,CAOtD,cAAe,CAHf,WAAY,CAFZ,MAAO,CADP,iBAAkB,CAElB,KAIe,CAjB/B,oEAqBY,WAAY,CArBxB,wIAwBY,iBAAkB,CAxB9B,6FA+BY,6BAAmB,CAAnB,4BAAmB,CADnB,mBAAa,CAAb,oBAAa,CAAb,mBAAa,CAAb,YAAa,CACb,0BAAmB,CAAnB,sBAAmB,CAAnB,kBAAmB,CACnB,0BCtDE,CDuDF,2BCvDE,CDwDF,gDAAiD,CACjD,UAAW","file":"block-accordion-section.css","sourcesContent":["// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n@use \"sass:math\";\n\n////\n/// @group functions\n////\n\n/// Finds the greatest common divisor of two integers.\n///\n/// @param {Number} $a - First number to compare.\n/// @param {Number} $b - Second number to compare.\n///\n/// @returns {Number} The greatest common divisor.\n@function gcd($a, $b) {\n  // From: http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript\n  @if ($b != 0) {\n    @return gcd($b, $a % $b);\n  }\n  @else {\n    @return abs($a);\n  }\n}\n\n/// Handles decimal exponents by trying to convert them into a fraction and then use a nth-root-algorithm for parts of the calculation\n///\n/// @param {Number} $base - The base number.\n/// @param {Number} $exponent - The exponent.\n///\n/// @returns {Number} The product of the exponentiation.\n@function pow($base, $exponent, $prec: 16) {\n  @if (floor($exponent) != $exponent) {\n    $prec2: pow(10, $prec);\n    $exponent: round($exponent * $prec2);\n    $denominator: gcd($exponent, $prec2);\n    @return nth-root(pow($base, divide($exponent, $denominator)), divide($prec2, $denominator), $prec);\n  }\n\n  $value: $base;\n  @if $exponent > 1 {\n    @for $i from 2 through $exponent {\n      $value: $value * $base;\n    }\n  }\n  @else if $exponent < 1 {\n    @for $i from 0 through -$exponent {\n      $value: divide($value, $base);\n    }\n  }\n\n  @return $value;\n}\n\n@function nth-root($num, $n: 2, $prec: 12) {\n  // From: http://rosettacode.org/wiki/Nth_root#JavaScript\n  $x: 1;\n\n  @for $i from 0 through $prec {\n    $x: divide(1, $n) * (($n - 1) * $x + divide($num, pow($x, $n - 1)));\n  }\n\n  @return $x;\n}\n\n/// Calculates the height as a percentage of the width for a given ratio.\n/// @param {List} $ratio - Ratio to use to calculate the height, formatted as `x by y`.\n/// @return {Number} A percentage value for the height relative to the width of a responsive container.\n@function ratio-to-percentage($ratio) {\n  $w: nth($ratio, 1);\n  $h: nth($ratio, 3);\n  @return divide($h, $w) * 100%;\n}\n\n/// Parse the given `$fraction` to numerators and denumerators.\n///\n/// @param {*} $fraction - Value representing a fraction to parse. It can be formatted as `50%`, `1 of 2`, `1/2` or `50` (no denominator would be returned).\n///\n/// @return {List} List of parsed values with numerator at first position and denumerator as second. These values may be null.\n@function zf-parse-fraction($fraction) {\n\n  @if type-of($fraction) == 'number' {\n    // \"50%\"\n    @if unit($fraction) == '%' {\n      @return (strip-unit($fraction), 100);\n    }\n    @else if (unit($fraction) == '') {\n      // \"0.5\"\n      @if $fraction < 1 {\n        @return ($fraction * 100, 100);\n      }\n      // \"50\"\n      @else {\n        @return ($fraction, null);\n      }\n    }\n  }\n\n  @else if type-of($fraction) == 'list' {\n    // \"50 of 100\", \"50/100\"...\n    @if length($fraction) == 3\n    and type-of(nth($fraction, 1) == 'number')\n    and type-of(nth($fraction, 3) == 'number') {\n      @return (nth($fraction, 1), nth($fraction, 3));\n    }\n  }\n\n  @return (null, null);\n}\n\n/// Returns whether the given `$value` represents a fraction. Supports formats like `50%`, `1 of 2`, `1 per 2` or `1/2`.\n///\n/// @param {*} $value - Value to test.\n/// @param {Boolean} $allow-no-denominator [false] - If `true`, simple numbers without denominators like `50` are supported.\n///\n/// @return {Boolean} `true` if `$value` represents a fraction, `false` otherwise.\n@function zf-is-fraction($value, $allow-no-denominator: false) {\n  $parsed: zf-parse-fraction($value);\n  @return not(nth($parsed, 1) == null\n    or (nth($parsed, 2) == null and $allow-no-denominator == false));\n}\n\n/// Calculate a percentage from a given fraction.\n///\n/// @param {Number|List} $fraction - Value representing a fraction to use to calculate the percentage, formatted as `50` (relative to `$denominator`), `50%`, `1 of 2` or `1/2`.\n/// @param {Number|List} $denominator - Default value to use as denominator when `$fraction` represents an absolute value.\n@function fraction-to-percentage(\n  $fraction,\n  $denominator: null\n) {\n  $parsed: zf-parse-fraction($fraction);\n  $parsed-nominator: nth($parsed, 1);\n  $parsed-denominator: nth($parsed, 2);\n\n  @if $parsed-nominator == null {\n    @error 'Wrong syntax for \"fraction-to-percentage()\". Use a number, decimal, percentage, or \"n of n\" / \"n/n\".';\n  }\n  @if $parsed-denominator == null {\n    @if type-of($denominator) == 'number' {\n      $parsed-denominator: $denominator;\n    }\n    @else {\n      @error 'Error with \"fraction-to-percentage()\". A default \"$denominator\" is required to support absolute values';\n    }\n  }\n\n  @return percentage(divide($parsed-nominator, $parsed-denominator));\n}\n\n/// Divide the given `$divident` by the given `$divisor`.\n///\n/// @param {Number} $divident - The divident.\n/// @param {Number} $divisor - The divisor.\n/// @param {Number} $precision - The precision decimals for the division.\n///\n/// @return {Number} The product of the division.\n@function divide($dividend, $divisor, $precision: 12) {\n  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);\n  $dividend: abs($dividend);\n  $divisor: abs($divisor);\n  @if $dividend == 0 {\n    @return 0;\n  }\n  @if $divisor == 0 {\n    @error 'Cannot divide by 0';\n  }\n  $remainder: $dividend;\n  $result: 0;\n  $factor: 10;\n  @while ($remainder > 0 and $precision >= 0) {\n    $quotient: 0;\n    @while ($remainder >= $divisor) {\n      $remainder: $remainder - $divisor;\n      $quotient: $quotient + 1;\n    }\n    $result: $result * 10 + $quotient;\n    $factor: $factor * 0.1;\n    $remainder: $remainder * 10;\n    $precision: $precision - 1;\n    @if ($precision < 0 and $remainder >= $divisor * 5) {\n      $result: $result + 1;\n    }\n  }\n  $result: $result * $factor * $sign;\n  $dividend-unit: unit($dividend);\n  $divisor-unit: unit($divisor);\n  $unit-map: (\n    'px': 1px,\n    'rem': 1rem,\n    'em': 1em,\n    '%': 1%\n  );\n  @if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {\n    $result: $result * map-get($unit-map, $dividend-unit);\n  }\n\n  @return $result;\n}\n","@import '../../assets/styles/scss/foundation/foundation-settings';\n@import '../../assets/styles/scss/global/sass-variables';\n@import '../../assets/styles/scss/global/mixins';\n\n/* Front-end Styles */\n:root {\n    --accordion-editor-color: #FE9D2B;\n}\n.accordion-section  {\n    $this: &;\n    &__container {\n        padding-bottom: 0 $i;\n    }\n    &.has-background {\n        #{$this}__container {\n            padding-top: var(--global-spacing, var(--renoun-section-padding) );\n        }\n    }\n\n    &.alignleft, &.aligncenter, &.alignright {\n        float: none $i;\n        // margin: initial;\n        margin-top: initial;\n        margin-bottom: initial;\n        margin-left: auto $i;\n        margin-right: auto $i;\n    }\n}\n/* Editor-specific Styles */\n.editor-styles-wrapper {\n\n    .wp-block-ecostar-es-accordion-section {\n        display: block;\n        min-height: 2rem;\n        border: 1px solid var(--accordion-editor-color);\n        .accordion-section {\n            position: relative;\n            padding-top: 18px;\n            &:before {\n                content: 'Accordion Section: ' attr(data-section-name); // attr(data-accordion-name);\n                position: absolute;\n                left: 0;\n                top: 0;\n                height: 18px;\n                background-color: var(--accordion-editor-color);\n                color: black;\n                font-size: 14px;\n            }\n        }\n        &:focus {\n            border: none;\n        }\n        &:hover, &:focus {\n            position: relative;\n            .selector {\n                // display: block $i;\n            }\n        }\n        .accordion-section-innerblocks {\n            display: flex;\n            flex-flow: row wrap;\n            margin-left: auto $i;\n            margin-right: auto $i;\n            max-width: var(--wp--style--global--content-size);\n            width: 100%;\n        }\n\n    }\n}","$mobile-menu-height: 64px;\n\n$menu-transition: all .35s cubic-bezier(.3,.66,.34,1);\n$default-transition: all .25s ease-out;\n$link-transition: color 150ms ease-in-out;\n\n$corner-sq: 25px;\n$i: !important;\n"]}